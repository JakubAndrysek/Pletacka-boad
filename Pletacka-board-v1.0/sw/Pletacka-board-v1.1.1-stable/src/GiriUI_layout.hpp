// clang-format off

// AUTOGENERATED FILE, DO NOT EDIT
// Generated by https://roboticsbrno.github.io/Esp32-RBGridUI-Designer/
// Layout: {"cols":12,"rows":18,"enableSplitting":true,"widgets":[{"uuid":64246,"type":"Text","state":{"id":"PletackaInfo","x":0,"y":0,"w":7.5,"h":2,"css":{},"text":"Pletacka-IoT","fontSize":35,"color":"#000000","align":"center","valign":"center","prefix":"","suffix":""}},{"uuid":16128,"type":"Text","state":{"id":"numberInfo","x":7.5,"y":0,"w":4.5,"h":2,"css":{},"text":"-","fontSize":35,"color":"#000000","align":"start","valign":"center","prefix":"","suffix":""}},{"uuid":1401,"type":"Button","state":{"id":"rebootButton","x":1,"y":3.5,"w":3,"h":3,"css":{},"text":"Reboot"}},{"uuid":13853,"type":"Button","state":{"id":"numberPlus","x":6,"y":3.5,"w":3,"h":1,"css":{},"text":"+"}},{"uuid":26857,"type":"Button","state":{"id":"numberMinus","x":6,"y":5.5,"w":3,"h":1,"css":{},"text":"-"}},{"uuid":58647,"type":"Led","state":{"id":"finLed","x":2,"y":9.5,"w":1.5,"h":1.5,"css":{},"color":"#00ff1e","on":false}},{"uuid":35160,"type":"Led","state":{"id":"stopLed","x":8.5,"y":9.5,"w":1.5,"h":1.5,"css":{},"color":"#ff0000","on":false}},{"uuid":40849,"type":"Text","state":{"id":"finText","x":0.5,"y":11,"w":4.5,"h":1,"css":{},"text":"Finished","fontSize":25,"color":"#000000","align":"center","valign":"center","prefix":"","suffix":""}},{"uuid":14930,"type":"Text","state":{"id":"stopText","x":7,"y":11,"w":4.5,"h":1,"css":{},"text":"Stop","fontSize":25,"color":"#000000","align":"center","valign":"center","prefix":"","suffix":""}},{"uuid":58446,"type":"Text","state":{"id":"stateText","x":5,"y":7,"w":5,"h":1.5,"css":{},"text":"STATE","fontSize":40,"color":"#f00000","align":"center","valign":"center","prefix":"","suffix":""}},{"uuid":5894,"type":"Button","state":{"id":"numberSave","x":9,"y":3.5,"w":2,"h":3,"css":{},"text":"Save"}},{"uuid":61065,"type":"Text","state":{"id":"iZastavText","x":0,"y":12.5,"w":5.5,"h":1.5,"css":{},"text":"Zastaveno","fontSize":30,"color":"#ff0000","align":"center","valign":"center","prefix":"","suffix":""}},{"uuid":53092,"type":"Text","state":{"id":"iZastavVal","x":6,"y":12.5,"w":1.5,"h":1.5,"css":{},"text":"-","fontSize":25,"color":"#fa0000","align":"center","valign":"center","prefix":"","suffix":""}},{"uuid":40357,"type":"Text","state":{"id":"iUplText","x":0,"y":14,"w":5.5,"h":1.5,"css":{},"text":"Upleteno","fontSize":30,"color":"#02f713","align":"center","valign":"center","prefix":"","suffix":""}},{"uuid":30325,"type":"Text","state":{"id":"iUplVal","x":6,"y":14,"w":2.5,"h":1.5,"css":{},"text":"-","fontSize":25,"color":"#02f713","align":"flex-end","valign":"center","prefix":"","suffix":""}},{"uuid":60275,"type":"Text","state":{"id":"iZastavVal2","x":9.5,"y":12.5,"w":2.5,"h":1.5,"css":{},"text":"-","fontSize":20,"color":"#fa0000","align":"center","valign":"center","prefix":"","suffix":""}},{"uuid":39740,"type":"Text","state":{"id":"iZastavUnit","x":7.5,"y":12.5,"w":2,"h":1.5,"css":{},"text":"-","fontSize":25,"color":"#fa0000","align":"center","valign":"center","prefix":"","suffix":""}},{"uuid":13514,"type":"Text","state":{"id":"iUplUnit","x":9,"y":14,"w":3,"h":1.5,"css":{},"text":"-","fontSize":25,"color":"#02f713","align":"flex-start","valign":"center","prefix":"","suffix":""}},{"uuid":10111,"type":"Text","state":{"id":"numberText","x":6,"y":4.5,"w":3,"h":1,"css":{},"text":"-","fontSize":20,"color":"#000000","align":"center","valign":"center","prefix":"","suffix":""}},{"uuid":60080,"type":"Text","state":{"id":"Text1","x":0.5,"y":7,"w":4,"h":1.5,"css":{},"text":"Last  state","fontSize":20,"color":"#000000","align":"center","valign":"center","prefix":"","suffix":""}}]}

// Usage: include this file, where needed, and in *one* .cpp file,
// define also GRIDUI_LAYOUT_DEFINITION just before the layout like this:
//
//    #define GRIDUI_LAYOUT_DEFINITION
//    #include "layout.h"
//    using namespace gridui;
//
// The layout.h should also be the last included header. Then, in your code:
//
//    auto builder = Layout.begin();
//    builder.Button1.onPress([](Button&) { ... })
//    ...
//    builder.commit();

#pragma once

#include <esp_log.h>
#include "gridui.h"

namespace gridui {

#ifndef RB_GRIDUI_VERSION
#define RB_GRIDUI_VERSION 0x040000
#endif

static_assert(RB_GRIDUI_VERSION >= 0x040000,
    "Your RBGridUi library version is too low for this layout, please update to 040000.");

class _Layout;

namespace builder {
class _LayoutBuilder {
    friend class gridui::_Layout;

    _LayoutBuilder() :
        PletackaInfo(
            UI.text(0, 0, 7.5, 2, 64246)
                .text("Pletacka-IoT")
                .fontSize(35)
        ),
        numberInfo(
            UI.text(7.5, 0, 4.5, 2, 16128)
                .text("-")
                .fontSize(35)
                .align("start")
        ),
        rebootButton(
            UI.button(1, 3.5, 3, 3, 1401)
                .text("Reboot")
        ),
        numberPlus(
            UI.button(6, 3.5, 3, 1, 13853)
                .text("+")
        ),
        numberMinus(
            UI.button(6, 5.5, 3, 1, 26857)
                .text("-")
        ),
        finLed(
            UI.led(2, 9.5, 1.5, 1.5, 58647)
                .color("#00ff1e")
        ),
        stopLed(
            UI.led(8.5, 9.5, 1.5, 1.5, 35160)
                .color("#ff0000")
        ),
        finText(
            UI.text(0.5, 11, 4.5, 1, 40849)
                .text("Finished")
                .fontSize(25)
        ),
        stopText(
            UI.text(7, 11, 4.5, 1, 14930)
                .text("Stop")
                .fontSize(25)
        ),
        stateText(
            UI.text(5, 7, 5, 1.5, 58446)
                .text("STATE")
                .fontSize(40)
                .color("#f00000")
        ),
        numberSave(
            UI.button(9, 3.5, 2, 3, 5894)
                .text("Save")
        ),
        iZastavText(
            UI.text(0, 12.5, 5.5, 1.5, 61065)
                .text("Zastaveno")
                .fontSize(30)
                .color("#ff0000")
        ),
        iZastavVal(
            UI.text(6, 12.5, 1.5, 1.5, 53092)
                .text("-")
                .fontSize(25)
                .color("#fa0000")
        ),
        iUplText(
            UI.text(0, 14, 5.5, 1.5, 40357)
                .text("Upleteno")
                .fontSize(30)
                .color("#02f713")
        ),
        iUplVal(
            UI.text(6, 14, 2.5, 1.5, 30325)
                .text("-")
                .fontSize(25)
                .color("#02f713")
                .align("flex-end")
        ),
        iZastavVal2(
            UI.text(9.5, 12.5, 2.5, 1.5, 60275)
                .text("-")
                .fontSize(20)
                .color("#fa0000")
        ),
        iZastavUnit(
            UI.text(7.5, 12.5, 2, 1.5, 39740)
                .text("-")
                .fontSize(25)
                .color("#fa0000")
        ),
        iUplUnit(
            UI.text(9, 14, 3, 1.5, 13514)
                .text("-")
                .fontSize(25)
                .color("#02f713")
                .align("flex-start")
        ),
        numberText(
            UI.text(6, 4.5, 3, 1, 10111)
                .text("-")
                .fontSize(20)
        ),
        Text1(
            UI.text(0.5, 7, 4, 1.5, 60080)
                .text("Last  state")
                .fontSize(20)
        )
    {
    }

public:
    void commit();

    Text& PletackaInfo;
    Text& numberInfo;
    Button& rebootButton;
    Button& numberPlus;
    Button& numberMinus;
    Led& finLed;
    Led& stopLed;
    Text& finText;
    Text& stopText;
    Text& stateText;
    Button& numberSave;
    Text& iZastavText;
    Text& iZastavVal;
    Text& iUplText;
    Text& iUplVal;
    Text& iZastavVal2;
    Text& iZastavUnit;
    Text& iUplUnit;
    Text& numberText;
    Text& Text1;
};

}; // namespace builder

class _Layout {
    friend class builder::_LayoutBuilder;
public:
    _Layout() {}

    builder::_LayoutBuilder begin() {
        static bool called = false;
        if(called) {
            ESP_LOGE("GridUILayout", "Layout.begin() was called more than once, this is an error!");
        }
        called = true;
        return builder::_LayoutBuilder();
    }

    Text PletackaInfo;
    Text numberInfo;
    Button rebootButton;
    Button numberPlus;
    Button numberMinus;
    Led finLed;
    Led stopLed;
    Text finText;
    Text stopText;
    Text stateText;
    Button numberSave;
    Text iZastavText;
    Text iZastavVal;
    Text iUplText;
    Text iUplVal;
    Text iZastavVal2;
    Text iZastavUnit;
    Text iUplUnit;
    Text numberText;
    Text Text1;
};

extern _Layout Layout;
#ifdef GRIDUI_LAYOUT_DEFINITION
_Layout Layout;
#endif

namespace builder {

void _LayoutBuilder::commit() {
    Layout.PletackaInfo = PletackaInfo.finish();
    Layout.numberInfo = numberInfo.finish();
    Layout.rebootButton = rebootButton.finish();
    Layout.numberPlus = numberPlus.finish();
    Layout.numberMinus = numberMinus.finish();
    Layout.finLed = finLed.finish();
    Layout.stopLed = stopLed.finish();
    Layout.finText = finText.finish();
    Layout.stopText = stopText.finish();
    Layout.stateText = stateText.finish();
    Layout.numberSave = numberSave.finish();
    Layout.iZastavText = iZastavText.finish();
    Layout.iZastavVal = iZastavVal.finish();
    Layout.iUplText = iUplText.finish();
    Layout.iUplVal = iUplVal.finish();
    Layout.iZastavVal2 = iZastavVal2.finish();
    Layout.iZastavUnit = iZastavUnit.finish();
    Layout.iUplUnit = iUplUnit.finish();
    Layout.numberText = numberText.finish();
    Layout.Text1 = Text1.finish();
    UI.commit();
}

};

};